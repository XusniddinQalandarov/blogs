{
  "blogTitle": "Тех Блог Хусниддина",
  "navigateToAngularSetterGetter": "Setter и Getter в Angular",
  "powerOfGettersAndSetters": "Сила геттеров и сеттеров в TypeScript",
  "setterGetter": {
    "title": "Использование сеттера и геттера в Angular",
    "intro": "Мы используем <code>геттер</code> и <code>сеттер</code> для отслеживания изменений свойства <code>@Input</code> в Angular. Существует также другой способ — <code>NgOnChanges</code>, о котором мы поговорим позже в статье.",
    "childIntro": "В дочернем компоненте:",
    "parentIntro": "В родительском компоненте:",
    "whatIsHappeningTitle": "Что происходит",
    "whatIsHappening": "В этой настройке дочерний компонент создаёт объект, а родительский компонент может изменить значение этого объекта с помощью кнопок (Messi или Ronaldo). Поскольку первоначальное имя игрока установлено в <code>null</code>, имя не отображается на экране до нажатия кнопки."
  },
  "powerGetters": {
    "title": "Возможности геттеров и сеттеров в TypeScript",
    "intro": "Когда мы работаем с <code>классами</code> в объектно-ориентированном программировании, инкапсуляция является ключевым понятием. Она заключается в объединении данных (<code>свойств</code>) и <code>методов</code>, работающих с этими данными, в единый блок — <code>класс</code>. Часть этого процесса — контроль доступа к внутреннему состоянию <code>класса</code>. Давайте посмотрим, почему это важно и как <code>геттеры</code> и <code>сеттеры</code> помогают в этом.",
    "challengeTitle": "Проблема: прямой доступ и его подводные камни",
    "challengeDesc": "Представьте, что у нас есть простой класс <code>Product</code>:",
    "solutionTitle": "Решение: введение геттеров и сеттеров",
    "solutionIntro": "Именно здесь <code>геттеры</code> и <code>сеттеры</code> проявляют свои сильные стороны! Это специальные <code>методы</code>, которые обеспечивают чтение и запись <code>свойств</code> объекта, позволяя добавлять логику перед возвратом или установкой значения.",
    "solutionDetail": "Давайте рефакторим наш класс <code>Product</code>. По соглашению мы будем префиксировать <code>приватное</code> свойство знаком подчёркивания (например, <code>_id</code>) и определим <code>публичные</code> аксессоры <code>get</code> и <code>set</code> для него:",
    "solutionAfterCode": "Теперь, когда вы пишете <code>bread.id = 2;</code>, вы не получаете доступ напрямую к полю, а вызываете метод <code>set id(newId: number)</code>. Аналогично, чтение <code>bread.id</code> вызывает метод <code>get id(): number</code>. Это работает без проблем и позволяет включать логику — проверку или логирование — внутри этих аксессоров.",
    "whyBotherTitle": "Зачем это нужно?",
    "reasonEncapsulation": "<strong>Инкапсуляция:</strong> защищает внутреннее состояние объекта.",
    "reasonControlledAccess": "<strong>Контролируемый доступ:</strong> вы определяете, как <code>свойства</code> читаются и записываются.",
    "reasonValidation": "<strong>Проверка данных (Validation):</strong> выполняйте проверки перед изменением значения <code>свойства</code> (например, проверка на положительный ID).",
    "reasonComputedProperties": "<strong>Вычисляемые свойства:</strong> <code>геттеры</code> могут возвращать значения, вычисленные на основе других <code>свойств</code>.",
    "reasonSideEffects": "<strong>Побочные эффекты (Side Effects):</strong> выполнение действий (например, логирование или вызов событий) при доступе или изменении <code>свойства</code>.",
    "concluding": "<code>Геттеры</code> и <code>сеттеры</code> — это фундаментальные инструменты для создания надёжных, поддерживаемых и гибких <code>классов</code> в TypeScript и многих других ООП-языках. Они позволяют предоставить чистый <code>публичный API</code>, сохраняя внутреннюю логику <code>класса</code> скрытой."
  }
}
