{
  "blogTitle": "Тех Блог Хусниддина",
  "navigateToAngularSetterGetter": "Setter и Getter в Angular",
  "powerOfGettersAndSetters": "Сила геттеров и сеттеров в TypeScript",
  "setterGetter": {
    "title": "Использование сеттера и геттера в Angular",
    "intro": "Мы используем <code>геттер</code> и <code>сеттер</code> для отслеживания изменений свойства <code>@Input</code> в Angular. Существует также другой способ — <code>NgOnChanges</code>, о котором мы поговорим позже в статье.",
    "childIntro": "В дочернем компоненте:",
    "parentIntro": "В родительском компоненте:",
    "whatIsHappeningTitle": "Что происходит",
    "whatIsHappening": "В этой настройке дочерний компонент создаёт объект, а родительский компонент может изменить значение этого объекта с помощью кнопок (Messi или Ronaldo). Поскольку первоначальное имя игрока установлено в <code>null</code>, имя не отображается на экране до нажатия кнопки."
  },
  "powerGetters": {
    "title": "Возможности геттеров и сеттеров в TypeScript",
    "intro": "Когда мы работаем с <code>классами</code> в объектно-ориентированном программировании, инкапсуляция является ключевым понятием. Она заключается в объединении данных (<code>свойств</code>) и <code>методов</code>, работающих с этими данными, в единый блок — <code>класс</code>. Часть этого процесса — контроль доступа к внутреннему состоянию <code>класса</code>. Давайте посмотрим, почему это важно и как <code>геттеры</code> и <code>сеттеры</code> помогают в этом.",
    "challengeTitle": "Проблема: прямой доступ и его подводные камни",
    "challengeDesc": "Представьте, что у нас есть простой класс <code>Product</code>:",
    "solutionTitle": "Решение: введение геттеров и сеттеров",
    "solutionIntro": "Именно здесь <code>геттеры</code> и <code>сеттеры</code> проявляют свои сильные стороны! Это специальные <code>методы</code>, которые обеспечивают чтение и запись <code>свойств</code> объекта, позволяя добавлять логику перед возвратом или установкой значения.",
    "solutionDetail": "Давайте рефакторим наш класс <code>Product</code>. По соглашению мы будем префиксировать <code>приватное</code> свойство знаком подчёркивания (например, <code>_id</code>) и определим <code>публичные</code> аксессоры <code>get</code> и <code>set</code> для него:",
    "solutionAfterCode": "Теперь, когда вы пишете <code>bread.id = 2;</code>, вы не получаете доступ напрямую к полю, а вызываете метод <code>set id(newId: number)</code>. Аналогично, чтение <code>bread.id</code> вызывает метод <code>get id(): number</code>. Это работает без проблем и позволяет включать логику — проверку или логирование — внутри этих аксессоров.",
    "whyBotherTitle": "Зачем это нужно?",
    "reasonEncapsulation": "<strong>Инкапсуляция:</strong> защищает внутреннее состояние объекта.",
    "reasonControlledAccess": "<strong>Контролируемый доступ:</strong> вы определяете, как <code>свойства</code> читаются и записываются.",
    "reasonValidation": "<strong>Проверка данных (Validation):</strong> выполняйте проверки перед изменением значения <code>свойства</code> (например, проверка на положительный ID).",
    "reasonComputedProperties": "<strong>Вычисляемые свойства:</strong> <code>геттеры</code> могут возвращать значения, вычисленные на основе других <code>свойств</code>.",
    "reasonSideEffects": "<strong>Побочные эффекты (Side Effects):</strong> выполнение действий (например, логирование или вызов событий) при доступе или изменении <code>свойства</code>.",
    "concluding": "<code>Геттеры</code> и <code>сеттеры</code> — это фундаментальные инструменты для создания надёжных, поддерживаемых и гибких <code>классов</code> в TypeScript и многих других ООП-языках. Они позволяют предоставить чистый <code>публичный API</code>, сохраняя внутреннюю логику <code>класса</code> скрытой."
  },
 "controlFlow": {
  "title": "Поток управления в Angular: *ngIf vs @if, *ngFor vs @for и @switch",
  "intro": "В Angular для условного и циклического рендеринга традиционно используются <code>*ngIf</code>, <code>*ngFor</code> и <code>[ngSwitch]</code>. С версии 16 появились новые синтаксисы <code>@if</code>, <code>@for</code> и <code>@switch</code> – они напоминают чистый JS, сокращают шаблонный код и улучшают читаемость.",
  "ifVsNgIfTitle": "*ngIf vs @if",
  "ifVsNgIfDesc": "<code>*ngIf</code> — встроенная структурная директива для условного отображения шаблона. <code>@if</code> предлагает более лаконичный JS-подобный синтаксис для той же задачи.",
  "nestedIfDesc": "С помощью <code>*ngIf</code> и <code>ng-template</code> вы создаёте блок <code>else</code>, тогда как <code>@if</code> позволяет писать <code>@else</code> прямо в том же блоке.",
  "forVsNgForTitle": "*ngFor vs @for",
  "forVsNgForDesc": "<code>*ngFor</code> выполняет итерацию по коллекции. <code>@for</code> даёт более понятный синтаксис цикла и поддерживает блок <code>@empty</code> для обработки пустого массива.",
  "trackFeatureTitle": "Оптимизация: track vs trackBy",
  "trackFeatureDesc": "В <code>*ngFor</code> можно передать функцию <code>trackBy</code> для оптимизации обновлений <code>DOM</code>. В <code>@for</code> достаточно добавить <code>track item.id</code> в объявление цикла для того же эффекта.",
  "switchVsNgSwitchTitle": "*ngSwitch vs @switch",
  "switchVsNgSwitchDesc": "<code>*ngSwitch</code> предоставляет <code>switch-case-default</code> в шаблоне. <code>@switch</code> позволяет писать тот же синтаксис <code>@case</code> и <code>@default</code> как в JavaScript.",
  "conclusion": "Новые директивы управления потоком (<code>@if</code>, <code>@for</code>, <code>@switch</code>) в Angular 16 дополняют традиционные <code>*ngIf</code>, <code>*ngFor</code> и <code>[ngSwitch]</code>, предлагая более лаконичный JS-подобный синтаксис, уменьшающий шаблонный код и улучшающий читаемость."
},"pipes": {
  "title": "Чистые и Нечистые Пайпы в Angular",
  "intro": "Пайпы в Angular используются для преобразования данных в другой формат, делая их более удобными для пользователя.",
  "howItWorks": "<code>Пайп</code> принимает входное значение (<code>input</code>) и преобразует данные.",
  "example": "Например:",
  "usage": "Чтобы использовать <code>пайп</code>, просто добавьте его в массив <code>imports</code>.",
  "defaultCurrency": "По умолчанию <code>CurrencyPipe</code> возвращает значения в <code>'$'</code>; чтобы изменить это, добавьте <code>':'</code> и нужную валюту, например <code>currency: 'UZS'</code>.",
  "commonPipesTitle": "Распространённые встроенные пайпы Angular:",
  "asyncPipe": "<code>AsyncPipe</code>: получает данные из <code>Promise</code> или <code>Observable</code>",
  "currencyPipe": "<code>CurrencyPipe</code>: форматирует число как валюту",
  "datePipe": "<code>DatePipe</code>: форматирует даты",
  "jsonPipe": "<code>JsonPipe</code>: преобразует объекты в <code>JSON</code>-строки",
  "upperCasePipe": "<code>UpperCasePipe</code>: преобразует текст в верхний регистр",
  "titleCasePipe": "<code>TitleCasePipe</code>: делает заглавной первую букву каждого слова",
  "lowerCasePipe": "<code>LowerCasePipe</code>: преобразует текст в нижний регистр",
  "percentPipe": "<code>PercentPipe</code>: форматирует число как процент",
  "pureImpureHeading": "Чистые и Нечистые Пайпы:",
  "pureDesc": "<code>Чистый пайп</code> всегда возвращает одинаковый результат (<code>output</code>) для одинакового входа (<code>input</code>). Angular обновляет его только при изменении <code>ссылки</code> на вход (input reference).",
  "impureDesc": "<code>Нечистый пайп</code> может выдавать разные результаты (<code>output</code>) для одного и того же входа (<code>input</code>) и срабатывает при каждом <code>цикле обнаружения изменений</code> (change-detection cycle). Полезен для данных с сервера/файла, но снижает <code>производительность</code> (performance).",
  "pureExampleTitle": "Пример чистого пайпа:",
  "impureExampleTitle": "Пример нечистого пайпа:",
  "conclusionTitle": "Вывод:",
  "conclusion": "<code>Нечистые пайпы</code> можно использовать при необходимости, но они выполняются каждый <code>цикл</code> (cycle) и влияют на <code>производительность</code> (performance). По возможности используйте <code>чистые пайпы</code>.",
  "lazyNote": "<code>Чистые пайпы</code> «<code>ленивы</code>» (lazy): они не запускаются, пока не изменится <code>ссылка</code> на вход (input reference) или значение входа."
}
}
